var searchIndex = JSON.parse('{\
"galloc":{"doc":"","t":[7,0,3,16,8,16,3,8,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ALLOC","prelude","Box","Err","FromStr","Owned","String","ToOwned","ToString","Vec","VecDeque","add","add_assign","allocator","allocator","append","append","as_bytes","as_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slices","as_mut_str","as_mut_vec","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slices","as_str","assume_init","assume_init","back","back_mut","binary_search","binary_search_by","binary_search_by_key","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","call_once","capacity","capacity","capacity","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_from","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","contains","dedup","dedup_by","dedup_by_key","default","default","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drain","drain","drain","drain_filter","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_from_slice","extend_from_within","extend_from_within","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extend_reserve","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw","from_raw_in","from_raw_parts","from_raw_parts","from_raw_parts_in","from_str","from_str","from_utf16","from_utf16_lossy","from_utf8","from_utf8_lossy","from_utf8_unchecked","front","front_mut","ge","get","get_mut","gt","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert","insert","insert_str","into","into","into","into","into_boxed_slice","into_boxed_slice","into_boxed_str","into_bytes","into_future","into_inner","into_iter","into_iter","into_iter","into_pin","into_raw","into_raw_parts","into_raw_parts","into_raw_parts_with_alloc","into_raw_with_allocator","into_searcher","is_contained_in","is_empty","is_empty","is_empty","is_empty","is_prefix_of","is_suffix_of","iter","iter_mut","last","le","leak","leak","len","len","len","len","lt","make_contiguous","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new_in","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","next","next_back","nth","nth_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partition_point","pin","pin_in","poll","poll_next","pop","pop","pop_back","pop_front","push","push","push_back","push_front","push_str","range","range_mut","remove","remove","remove","remove_matches","replace_range","reserve","reserve","reserve","reserve_exact","reserve_exact","reserve_exact","resize","resize","resize_with","resize_with","resume","retain","retain","retain","rotate_left","rotate_right","set_len","shrink_to","shrink_to","shrink_to","shrink_to_fit","shrink_to_fit","shrink_to_fit","size_hint","size_hint","spare_capacity_mut","splice","split_at_spare_mut","split_off","split_off","split_off","strip_prefix_of","strip_suffix_of","swap","swap_remove","swap_remove_back","swap_remove_front","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","truncate","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_zeroed","try_new_zeroed_in","try_reserve","try_reserve","try_reserve","try_reserve_exact","try_reserve_exact","try_reserve_exact","type_id","type_id","type_id","type_id","vec","vec","with_capacity","with_capacity","with_capacity","with_capacity_in","write","write_char","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","Drain","DrainFilter","IntoIter","Splice","Vec","allocator","allocator","allocator","as_mut_slice","as_ref","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","count","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","next","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["galloc","","galloc::preludegalloc::prelude::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","A pointer type for heap allocation.","The associated error which can be returned from parsing.","Parse a value from a string","The resulting type after obtaining ownership.","A UTF-8–encoded, growable string.","A generalization of <code>Clone</code> to borrowed data.","A trait for converting a value to a <code>String</code>.","A contiguous growable array type, written as <code>Vec<T></code> and …","A double-ended queue implemented with a growable ring …","","","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> …","Returns a byte slice of this <code>String</code>’s contents.","","","","","Returns an unsafe mutable pointer to the vector’s …","Extracts a mutable slice of the entire vector.","Returns a pair of slices which contain, in order, the …","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>…","Returns a raw pointer to the vector’s buffer.","","","","","","Extracts a slice containing the entire vector.","Returns a pair of slices which contain, in order, the …","Extracts a string slice containing the entire <code>String</code>.","Converts to <code>Box<[T], A></code>.","Converts to <code>Box<T, A></code>.","Provides a reference to the back element, or <code>None</code> if the …","Provides a mutable reference to the back element, or <code>None</code> …","Binary searches this sorted <code>VecDeque</code> for a given element.","Binary searches this sorted <code>VecDeque</code> with a comparator …","Binary searches this sorted <code>VecDeque</code> with a key …","","","","","","","","","","","","","","","","","","Returns the number of elements the <code>VecDeque</code> can hold …","Returns the number of elements the vector can hold without…","Returns this <code>String</code>’s capacity, in bytes.","Clears the <code>VecDeque</code>, removing all values.","Clears the vector, removing all values.","Truncates this <code>String</code>, removing all contents.","Returns a new box with a <code>clone()</code> of this box’s contents.","","","","","","","Copies <code>source</code>’s contents into <code>self</code> without creating a …","","","","","Uses borrowed data to replace owned data, usually by …","","","","","","","","Returns <code>true</code> if the <code>VecDeque</code> contains an element equal to …","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","","","Creates a <code>Box<T></code>, with the <code>Default</code> value for T.","Creates an empty <code>VecDeque<T></code>.","Creates an empty <code>Vec<T></code>.","Creates an empty <code>String</code>.","","","","","","","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","Creates an iterator which uses a closure to determine if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","Copies elements from <code>src</code> range to the end of the string.","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>String</code> using interpolation of runtime …","Converts a <code>&str</code> into a <code>Box<str></code>","Converts a <code>Box<str></code> into a <code>Box<[u8]></code>","Converts a <code>[T; N]</code> into a <code>Box<[T]></code>","","","Convert a vector into a boxed slice.","","Converts a <code>T</code> into a <code>Box<T></code>","","Converts the given <code>String</code> to a boxed <code>str</code> slice that is …","Converts a <code>&[T]</code> into a <code>Box<[T]></code>","","Turn a <code>Vec<T></code> into a <code>VecDeque<T></code>.","Turn a <code>VecDeque<T></code> into a <code>Vec<T></code>.","Convert a boxed slice into a vector by transferring …","Allocate a <code>Vec<T></code> and fill it by cloning <code>s</code>’s items.","","Converts a <code>BinaryHeap<T></code> into a <code>Vec<T></code>.","","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Convert a clone-on-write slice into a vector.","Allocate a <code>Vec<u8></code> and fill it with a UTF-8 string.","Allocate a <code>Vec<T></code> and fill it by cloning <code>s</code>’s items.","","Converts a <code>&String</code> into a <code>String</code>.","Converts a <code>&mut str</code> into a <code>String</code>.","Converts the given boxed <code>str</code> slice to a <code>String</code>. It is …","Allocates an owned <code>String</code> from a single character.","Converts a clone-on-write string to an owned instance of …","Converts a <code>&str</code> into a <code>String</code>.","","","","","","","","","","Constructs a box from a raw pointer.","Constructs a box from a raw pointer in the given …","Creates a <code>Vec<T></code> directly from the raw components of …","Creates a new <code>String</code> from a length, capacity, and pointer.","Creates a <code>Vec<T, A></code> directly from the raw components of …","Parses a string <code>s</code> to return a value of this type.","","Decode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …","Decode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing…","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","Provides a reference to the front element, or <code>None</code> if the …","Provides a mutable reference to the front element, or <code>None</code>…","","Provides a reference to the element at the given index.","Provides a mutable reference to the element at the given …","","","","","","","","","","","","","","","","","","","","","","Inserts an element at <code>index</code> within the <code>VecDeque</code>, shifting …","Inserts an element at position <code>index</code> within the vector, …","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte …","","","","","Converts a <code>Box<T></code> into a <code>Box<[T]></code>","Converts the vector into <code>Box<[T]></code>.","Converts this <code>String</code> into a <code>Box</code><code><</code><code>str</code><code>></code>.","Converts a <code>String</code> into a byte vector.","","Consumes the <code>Box</code>, returning the wrapped value.","","Consumes the <code>VecDeque</code> into a front-to-back iterator …","Creates a consuming iterator, that is, one that moves …","Converts a <code>Box<T></code> into a <code>Pin<Box<T>></code>","Consumes the <code>Box</code>, returning a wrapped raw pointer.","Decomposes a <code>Vec<T></code> into its raw components.","Decomposes a <code>String</code> into its raw components.","Decomposes a <code>Vec<T></code> into its raw components.","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …","","","","Returns <code>true</code> if the <code>VecDeque</code> is empty.","Returns <code>true</code> if the vector contains no elements.","Returns <code>true</code> if this <code>String</code> has a length of zero, and …","","","Returns a front-to-back iterator.","Returns a front-to-back iterator that returns mutable …","","","Consumes and leaks the <code>Box</code>, returning a mutable reference,…","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","","Returns the number of elements in the <code>VecDeque</code>.","Returns the number of elements in the vector, also …","Returns the length of this <code>String</code>, in bytes, not <code>char</code>s or …","","Rearranges the internal storage of this deque so it is …","","","","","","","","","","","","Allocates memory on the heap and then places <code>x</code> into it.","Creates an empty <code>VecDeque</code>.","Constructs a new, empty <code>Vec<T></code>.","Creates a new empty <code>String</code>.","Allocates memory in the given allocator then places <code>x</code> …","Constructs a new, empty <code>Vec<T, A></code>.","Constructs a new box with uninitialized contents.","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents.","Constructs a new boxed slice with uninitialized contents …","Constructs a new <code>Box</code> with uninitialized contents, with …","Constructs a new <code>Box</code> with uninitialized contents, with …","Constructs a new boxed slice with uninitialized contents, …","Constructs a new boxed slice with uninitialized contents …","","","","","","","","","Returns the index of the partition point according to the …","Constructs a new <code>Pin<Box<T>></code>. If <code>T</code> does not implement …","Constructs a new <code>Pin<Box<T, A>></code>. If <code>T</code> does not implement …","","","Removes the last element from a vector and returns it, or …","Removes the last character from the string buffer and …","Removes the last element from the <code>VecDeque</code> and returns …","Removes the first element and returns it, or <code>None</code> if the …","Appends an element to the back of a collection.","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends an element to the back of the <code>VecDeque</code>.","Prepends an element to the <code>VecDeque</code>.","Appends a given string slice onto the end of this <code>String</code>.","Creates an iterator that covers the specified range in …","Creates an iterator that covers the specified mutable …","Removes and returns the element at <code>index</code> from the <code>VecDeque</code>…","Removes and returns the element at position <code>index</code> within …","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Remove all matches of pattern <code>pat</code> in the <code>String</code>.","Removes the specified range in the string, and replaces …","Reserves capacity for at least <code>additional</code> more elements …","Reserves capacity for at least <code>additional</code> more elements …","Ensures that this <code>String</code>’s capacity is at least …","Reserves the minimum capacity for exactly <code>additional</code> more …","Reserves the minimum capacity for exactly <code>additional</code> more …","Ensures that this <code>String</code>’s capacity is <code>additional</code> bytes …","Modifies the <code>VecDeque</code> in-place so that <code>len()</code> is equal to …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Modifies the <code>VecDeque</code> in-place so that <code>len()</code> is equal to …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the characters specified by the predicate.","Rotates the double-ended queue <code>mid</code> places to the left.","Rotates the double-ended queue <code>k</code> places to the right.","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the <code>VecDeque</code> with a lower bound.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of this <code>String</code> with a lower bound.","Shrinks the capacity of the <code>VecDeque</code> as much as possible.","Shrinks the capacity of the vector as much as possible.","Shrinks the capacity of this <code>String</code> to match its length.","","","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the <code>VecDeque</code> into two at the given index.","Splits the collection into two at the given index.","Splits the string into two at the given byte index.","","","Swaps elements at indices <code>i</code> and <code>j</code>.","Removes an element from the vector and returns it.","Removes an element from anywhere in the <code>VecDeque</code> and …","Removes an element from anywhere in the <code>VecDeque</code> and …","Creates owned data from borrowed data, usually by cloning.","","","","","Converts the given value to a <code>String</code>.","","","","Shortens the <code>VecDeque</code>, keeping the first <code>len</code> elements and …","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>String</code> to the specified length.","","","","","","","","","","Allocates memory on the heap then places <code>x</code> into it, …","Allocates memory in the given allocator then places <code>x</code> …","Constructs a new box with uninitialized contents on the …","Constructs a new box with uninitialized contents in the …","Constructs a new <code>Box</code> with uninitialized contents, with …","Constructs a new <code>Box</code> with uninitialized contents, with …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for exactly …","Tries to reserve the minimum capacity for exactly …","Tries to reserve the minimum capacity for exactly …","","","","","A contiguous growable array type with heap-allocated …","Creates a <code>Vec</code> containing the arguments.","Creates an empty <code>VecDeque</code> with space for at least <code>capacity</code>…","Constructs a new, empty <code>Vec<T></code> with the specified …","Creates a new empty <code>String</code> with a particular capacity.","Constructs a new, empty <code>Vec<T, A></code> with the specified …","","","","","","","","","","","","","","","","A draining iterator for <code>Vec<T></code>.","An iterator which uses a closure to determine if an …","An iterator that moves out of a vector.","A splicing iterator for <code>Vec</code>.","A contiguous growable array type, written as <code>Vec<T></code> and …","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns the remaining items of this iterator as a mutable …","","","Returns the remaining items of this iterator as a slice.","Returns the remaining items of this iterator as a slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,2,0,0,0,0,0,3,3,4,5,6,5,3,4,5,5,3,5,5,6,3,3,5,4,5,5,3,3,5,6,3,4,4,6,6,6,6,6,4,4,6,5,5,3,3,4,4,6,5,5,3,3,4,4,4,6,5,3,6,5,3,4,4,4,6,5,3,4,4,6,5,3,4,2,6,5,3,4,6,5,3,6,5,5,5,4,4,4,6,5,3,4,5,3,4,5,3,4,4,4,6,5,3,5,4,6,5,4,6,6,6,6,6,6,6,5,5,5,5,5,5,3,3,3,3,6,6,5,5,3,3,3,3,3,3,5,5,3,6,6,5,5,3,3,3,3,3,6,6,5,5,3,3,4,4,4,4,6,5,3,3,0,4,4,4,4,4,4,4,4,4,4,4,6,6,5,5,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,4,6,5,3,3,3,3,3,3,4,4,5,3,5,1,3,3,3,3,3,3,6,6,4,6,6,4,4,6,5,3,6,5,3,3,3,3,3,3,6,5,3,3,3,3,3,3,6,5,3,3,4,6,5,3,4,5,3,3,4,4,4,6,5,4,4,5,3,5,4,4,4,4,6,5,3,4,4,6,6,4,4,4,5,4,6,5,3,4,6,4,5,5,5,5,5,5,3,3,3,3,4,6,5,3,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,6,5,3,6,4,4,4,4,5,3,6,6,5,3,6,6,3,6,6,6,5,3,3,3,6,5,3,6,5,3,6,5,6,5,4,6,5,3,6,6,5,6,5,3,6,5,3,4,4,5,5,5,6,5,3,4,4,6,5,6,6,2,4,6,5,3,7,4,3,3,6,5,3,4,4,6,5,3,4,6,5,3,4,4,4,4,4,4,6,5,3,6,5,3,4,6,5,3,0,0,6,5,3,5,4,3,4,4,4,4,4,4,3,4,4,4,4,4,4,0,0,0,0,0,8,9,10,9,8,9,8,9,8,9,10,11,8,9,10,11,9,9,9,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,8,9,8,9,10,11,8,9,11,8,9,10,11,9,8,9,10,11,8,9,10,11,8,9,10,11],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],["string",3]],[[["str",15]]],[[["box",3]]],[[]],[[["vecdeque",3]]],[[["vec",3]]],[[]],[[]],[[],["vec",3]],[[]],[[],["str",15]],[[]],[[]],[[]],[[],["str",15]],[[],["vec",3]],[[]],[[]],[[]],[[],["vec",3]],[[],["str",15]],[[]],[[]],[[]],[[],["str",15]],[[],["box",3]],[[],["box",3]],[[],["option",4]],[[],["option",4]],[[],[["usize",15],["result",4,["usize","usize"]]]],[[],[["usize",15],["result",4,["usize","usize"]]]],[[],[["usize",15],["result",4,["usize","usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["box",3]],[[],[["str",15],["box",3,["str","global"]],["global",3]]],[[],["box",3]],[[],["vecdeque",3]],[[],["vec",3]],[[],["string",3]],[[["box",3]]],[[["box",3]]],[[["vecdeque",3]]],[[["vec",3]]],[[["string",3]]],[[]],[[]],[[]],[[]],[[]],[[["box",3]],["ordering",4]],[[["vecdeque",3]],["ordering",4]],[[["vec",3]],["ordering",4]],[[["string",3]],["ordering",4]],[[],["bool",15]],[[]],[[]],[[]],[[],[["box",3,["global"]],["global",3]]],[[],[["str",15],["box",3,["str","global"]],["global",3]]],[[],[["box",3,["global"]],["global",3]]],[[],["vecdeque",3]],[[],[["vec",3,["global"]],["global",3]]],[[],["string",3]],[[]],[[]],[[],["str",15]],[[]],[[]],[[],["str",15]],[[],[["result",4,["box","box"]],["box",3],["box",3,["any"]]]],[[],[["result",4,["box","box"]],["box",3],["box",3,["any"]]]],[[],[["result",4,["box","box"]],["box",3],["box",3,["any"]]]],[[],["drain",3]],[[],["drain",3]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[]],[[]],[[["box",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vecdeque",3]],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["string",3]],["bool",15]],[[["str",15]],["bool",15]],[[["cow",4]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["string",3]]],[[["char",15]]],[[["char",15]]],[[["str",15],["cow",4,["str"]]]],[[["str",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["u64",15]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],null,[[["str",15]],[["str",15],["box",3,["str","global"]],["global",3]]],[[["str",15],["box",3,["str"]]],["box",3]],[[],[["box",3,["global"]],["global",3]]],[[]],[[]],[[["vec",3]],["box",3]],[[["cow",4]],[["box",3,["global"]],["global",3]]],[[],[["box",3,["global"]],["global",3]]],[[["str",15],["cow",4,["str"]]],[["str",15],["box",3,["str","global"]],["global",3]]],[[["string",3]],[["str",15],["box",3,["str","global"]],["global",3]]],[[],[["box",3,["global"]],["global",3]]],[[]],[[["vec",3,["global"]],["global",3]],["vecdeque",3]],[[["vecdeque",3]],[["vec",3,["global"]],["global",3]]],[[["box",3]],["vec",3]],[[],[["vec",3,["global"]],["global",3]]],[[],[["vec",3,["global"]],["global",3]]],[[["binaryheap",3]],[["vec",3,["global"]],["global",3]]],[[]],[[["string",3]],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[["cow",4]],[["vec",3,["global"]],["global",3]]],[[["str",15]],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["global"]],["global",3]]],[[]],[[["string",3]],["string",3]],[[["str",15]],["string",3]],[[["str",15],["box",3,["str","global"]],["global",3]],["string",3]],[[["char",15]],["string",3]],[[["str",15],["cow",4,["str"]]],["string",3]],[[["str",15]],["string",3]],[[],[["box",3,["global"]],["global",3]]],[[],["vecdeque",3]],[[],[["vec",3,["global"]],["global",3]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["box",3,["global"]],["global",3]]],[[],["box",3]],[[["usize",15]],[["vec",3,["global"]],["global",3]]],[[["usize",15]],["string",3]],[[["usize",15]],["vec",3]],[[["str",15]],["result",4]],[[["str",15]],[["result",4,["string"]],["string",3]]],[[],[["result",4,["string","fromutf16error"]],["string",3],["fromutf16error",3]]],[[],["string",3]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],[["string",3],["result",4,["string","fromutf8error"]],["fromutf8error",3]]],[[],[["str",15],["cow",4,["str"]]]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],["string",3]],[[],["option",4]],[[],["option",4]],[[["box",3]],["bool",15]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["box",3]],["bool",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15],["rangetoinclusive",3,["usize"]]],["str",15]],[[["rangefull",3]],["str",15]],[[["usize",15],["rangefrom",3,["usize"]]],["str",15]],[[["usize",15],["range",3,["usize"]]],["str",15]],[[["usize",15],["rangeto",3,["usize"]]],["str",15]],[[["usize",15],["rangeinclusive",3,["usize"]]],["str",15]],[[["usize",15]]],[[]],[[["usize",15],["rangeinclusive",3,["usize"]]],["str",15]],[[["usize",15],["range",3,["usize"]]],["str",15]],[[["usize",15],["rangetoinclusive",3,["usize"]]],["str",15]],[[["usize",15],["rangeto",3,["usize"]]],["str",15]],[[["rangefull",3]],["str",15]],[[["usize",15],["rangefrom",3,["usize"]]],["str",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["char",15]]],[[["usize",15],["str",15]]],[[]],[[]],[[]],[[]],[[["box",3]],["box",3]],[[],["box",3]],[[],[["str",15],["box",3,["str","global"]],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[["box",3]]],[[]],[[],["intoiter",3]],[[],["intoiter",3]],[[["box",3]],[["pin",3,["box"]],["box",3]]],[[["box",3]]],[[]],[[]],[[]],[[["box",3]]],[[["str",15]],["charpredicatesearcher",3]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["option",4]],[[["box",3]],["bool",15]],[[["box",3]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["box",3]],["bool",15]],[[]],[[["box",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[["string",3]],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["cow",4]],["bool",15]],[[],[["box",3,["global"]],["global",3]]],[[],["vecdeque",3]],[[],[["vec",3,["global"]],["global",3]]],[[],["string",3]],[[],["box",3]],[[],["vec",3]],[[],[["box",3,["maybeuninit","global"]],["maybeuninit",19],["global",3]]],[[],[["box",3,["maybeuninit"]],["maybeuninit",19]]],[[["usize",15]],[["global",3],["box",3,["global"]]]],[[["usize",15]],["box",3]],[[],[["box",3,["maybeuninit","global"]],["maybeuninit",19],["global",3]]],[[],[["box",3,["maybeuninit"]],["maybeuninit",19]]],[[["usize",15]],[["global",3],["box",3,["global"]]]],[[["usize",15]],["box",3]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["box",3]],[["option",4,["ordering"]],["ordering",4]]],[[["vecdeque",3]],[["option",4,["ordering"]],["ordering",4]]],[[["vec",3]],[["option",4,["ordering"]],["ordering",4]]],[[["string",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["usize",15]],[[],[["pin",3,["box"]],["box",3,["global"]]]],[[],[["pin",3,["box"]],["box",3]]],[[["box",3],["pin",3,["box"]],["context",3]],["poll",4]],[[["context",3],["box",3],["pin",3,["box"]]],[["option",4],["poll",4,["option"]]]],[[],["option",4]],[[],[["char",15],["option",4,["char"]]]],[[],["option",4]],[[],["option",4]],[[]],[[["char",15]]],[[]],[[]],[[["str",15]]],[[],["iter",3]],[[],["itermut",3]],[[["usize",15]],["option",4]],[[["usize",15]]],[[["usize",15]],["char",15]],[[]],[[["str",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["pin",3,["box"]],["box",3]],["generatorstate",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["splice",3]],[[]],[[["usize",15]],["vecdeque",3]],[[["usize",15]],["vec",3]],[[["usize",15]],["string",3]],[[["str",15]],[["str",15],["option",4,["str"]]]],[[["str",15]],[["str",15],["option",4,["str"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["box",3,["global"]],["global",3]],[["result",4,["box"]],["box",3,["global"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["box",3,["global"]],["result",4,["box","allocerror"]],["allocerror",3]]],[[],[["result",4,["box","allocerror"]],["box",3],["allocerror",3]]],[[],[["box",3,["maybeuninit","global"]],["result",4,["box","allocerror"]],["allocerror",3]]],[[],[["result",4,["box","allocerror"]],["box",3,["maybeuninit"]],["allocerror",3]]],[[],[["box",3,["maybeuninit","global"]],["result",4,["box","allocerror"]],["allocerror",3]]],[[],[["result",4,["box","allocerror"]],["box",3,["maybeuninit"]],["allocerror",3]]],[[["usize",15]],[["result",4,["tryreserveerror"]],["tryreserveerror",4]]],[[["usize",15]],[["result",4,["tryreserveerror"]],["tryreserveerror",4]]],[[["usize",15]],[["result",4,["tryreserveerror"]],["tryreserveerror",4]]],[[["usize",15]],[["result",4,["tryreserveerror"]],["tryreserveerror",4]]],[[["usize",15]],[["result",4,["tryreserveerror"]],["tryreserveerror",4]]],[[["usize",15]],[["result",4,["tryreserveerror"]],["tryreserveerror",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["usize",15]],["vecdeque",3]],[[["usize",15]],[["vec",3,["global"]],["global",3]]],[[["usize",15]],["string",3]],[[["usize",15]],["vec",3]],[[]],[[["char",15]],[["result",4,["error"]],["error",3]]],[[["i128",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["i8",15]]],[[["isize",15]]],[[["str",15]],[["result",4,["error"]],["error",3]]],[[["u128",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u8",15]]],[[["usize",15]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[8,"FromStr"],[8,"ToOwned"],[3,"String"],[3,"Box"],[3,"Vec"],[3,"VecDeque"],[8,"ToString"],[3,"Drain"],[3,"IntoIter"],[3,"DrainFilter"],[3,"Splice"]]},\
"gcore":{"doc":"","t":[12,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["0","0","0","MessageHandle","MessageId","ProgramId","as_slice","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","default","default","eq","eq","eq","exec","fmt","fmt","fmt","from","from","from","from","from_slice","from_slice","hash","hash","into","into","into","msg","ne","ne","ne","partial_cmp","partial_cmp","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","block_height","gas_available","wait","wake","id","load","reply","reply_commit","reply_push","reply_to","send","send_commit","send_init","send_push","size","source","value"],"q":["gcore","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcore::exec","","","","gcore::msg","","","","","","","","","","","",""],"d":["","","","Message handle.","Message identifier.","Program identifier.","Get <code>MessageId</code> represented as a slice of <code>u8</code>.","Get <code>ProgramId</code> represented as a slice of <code>u8</code>.","","","","","","","","","","","","","","","","","Sys calls related to the program execution flow.","","","","","","","","Create a new <code>MessageId</code> from the 32-byte slice <code>s</code>.","Create a new ProgramId from 32-byte slice <code>s</code>.","","","","","","Messaging API for GEAR programs.","","","","","","","","","","","","","","","Get the current block height.","Get the current value of the gas available for execution.","Pause the current message handling.","Resume previously paused message handling.","Obtain an identifier of the message currently being …","Get a payload of the message currently being processed.","Send a new message as a reply to the message currently …","Finalize current reply message.","Push a payload part to the current reply message.","Get an identifier of the initial message which the …","Send a new message to the program or user.","Finialize and send message formed in parts","Initialize a message to send formed in parts.","Push a payload part of the message to be sent in parts.","Get the payload size of the message being processed.","Get the 256-bit address of the message source.","Get the value associated with the message being processed."],"i":[1,2,3,0,0,0,2,3,1,2,3,1,2,3,1,2,3,2,3,2,3,1,2,3,0,1,2,3,1,2,3,3,2,3,2,3,1,2,3,0,1,2,3,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["messagehandle",3]],[[],["messageid",3]],[[],["programid",3]],[[["messageid",3]],["ordering",4]],[[["programid",3]],["ordering",4]],[[],["messageid",3]],[[],["programid",3]],[[["messagehandle",3]],["bool",15]],[[["messageid",3]],["bool",15]],[[["programid",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["messagehandle",3]],["bool",15]],[[["messageid",3]],["bool",15]],[[["programid",3]],["bool",15]],[[["messageid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["programid",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[],["u64",15]],[[]],[[["u64",15],["messageid",3]]],[[],["messageid",3]],[[]],[[["u64",15],["u128",15]],["messageid",3]],[[["u64",15],["u128",15]],["messageid",3]],[[]],[[],["messageid",3]],[[["u64",15],["u128",15],["programid",3]],["messageid",3]],[[["u64",15],["messagehandle",3],["u128",15],["programid",3]],["messageid",3]],[[],["messagehandle",3]],[[["messagehandle",3]]],[[],["usize",15]],[[],["programid",3]],[[],["u128",15]]],"p":[[3,"MessageHandle"],[3,"MessageId"],[3,"ProgramId"]]},\
"gear_core":{"doc":"Gear core.","t":[0,11,0,0,0,0,0,8,3,13,4,13,13,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,10,10,10,11,11,10,10,11,11,10,10,10,11,10,10,10,11,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,4,13,13,13,8,3,3,13,4,13,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,8,13,3,13,17,6,3,13,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,13,13,4,6,3,13,13,3,3,3,8,3,13,13,3,3,3,3,3,13,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,6,3,3,6,8,8,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,12,12,11,11,11,11,12,11,10,11,11,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["env","from","gas","memory","message","program","storage","Ext","LaterExt","None","PageAction","Read","Write","alloc","block_height","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","debug","decode","decode_all","decode_all_with_depth_limit","decode_and_advance_with_depth_limit","decode_with_depth_limit","default","encode_to","eq","fmt","free","from","from","gas","gas_available","get_mem","into","into","message_id","msg","new","reply","reply_commit","reply_push","reply_to","send","send_commit","send_init","send_push","set","set_mem","source","to_keyed_vec","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unset","value","wait","wake","with","with_fallible","ChargeResult","Decode","Encode","Enough","GasCounter","GasCounterLimited","GasCounterUnlimited","GasInjection","InstrumentError","NotEnough","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","burned","burned","burned","charge","charge","charge","clone","clone_into","eq","fmt","fmt","fmt","fmt","from","from","from","from","instrument","into","into","into","into","left","left","left","new","reduce","reduce","reduce","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AllocationsInUse","Error","InvalidFree","Memory","MemoryAccessError","MemoryContext","OutOfMemory","PAGE_SIZE","PageBuf","PageNumber","PageOccupied","add","alloc","allocations","as_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","cmp","data_ptr","data_size","decode","decode_all","decode_all_with_depth_limit","decode_and_advance_with_depth_limit","decode_with_depth_limit","encode","encode_to","eq","fmt","fmt","free","from","from","from","from","get_hash","grow","hash","into","into","into","memory","ne","new","offset","partial_cmp","program_id","raw","read","set_pages","size","size","sub","to_keyed_vec","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","using_encoded","write","DuplicateReply","DuplicateWaiting","Error","ExitCode","IncomingMessage","LateAccess","LimitExceeded","Message","MessageContext","MessageId","MessageIdGenerator","MessageState","NoReplyFound","OutOfBounds","OutgoingMessage","OutgoingPacket","Payload","ReplyMessage","ReplyPacket","UncommitedPayloads","as_byte_slice","as_mut_slice","as_ref","as_slice","as_slice_of","awakening","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","current","current","decode","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","dest","dest","dest","encode","encode","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","eq","eq","eq","eq","eq","exit_code","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_slice","gas_limit","gas_limit","gas_limit","gas_limit","gas_limit","gas_limit","gas_limit","get_hash","hash","id","id","id","id","id","into","into","into","into","into","into","into","into","into","into","into","into_message","into_message","into_message","into_raw","into_state","ne","ne","ne","ne","ne","new","new","new","new","new","new","new_reply","new_reply","new_system","new_system","next","nonce","outgoing","partial_cmp","payload","payload","payload","payload","payload","produce_outgoing","produce_reply","reply","reply","reply","reply","reply_commit","reply_push","send_commit","send_init","send_push","set_gas_limit","source","source","source","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","using_encoded","using_encoded","value","value","value","value","value","wait","waiting","wake","Program","ProgramId","as_mut_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","clear_memory","clone","clone","clone_into","clone_into","cmp","code","decode","decode","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","encode","encode_to","encode_to","eq","fetch_inc_message_nonce","fmt","fmt","fmt","from","from","from","from","from_slice","get_hash","get_page","get_page_mut","get_pages","hash","id","into","into","message_nonce","ne","new","partial_cmp","reset","set_code","set_memory","set_message_nonce","set_page","static_pages","system","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","using_encoded","InMemoryMessageQueue","InMemoryProgramStorage","InMemoryStorage","InMemoryWaitList","Log","MessageMap","MessageQueue","ProgramStorage","Storage","WaitList","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","default","dequeue","dequeue","exists","exists","fmt","fmt","from","from","from","from","from","from","from","from","from_components","get","get","get","insert","insert","into","into","into","into","into","log","message_queue","new","new","new","new","program_storage","put","queue","queue","queue_many","remove","remove","remove","remove","set","set","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wait_list"],"q":["gear_core","","","","","","","gear_core::env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gear_core::gas","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gear_core::memory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gear_core::messagegear_core::program","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gear_core::storage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Environment for running a module.","","Gas module.","Module for memory and memory context.","Message processing module and context.","Module for programs.","Storage backing abstractions","External api for managing memory, messages, allocations …","Struct for interacting with Ext","No access.","Page access rights.","Can be read.","Can be written.","Allocate number of pages.","Get the current block height.","","","","","","","","","Send debug message.","","","","","","","","","","Free specific memory page.","","","Report that some gas has been used.","Tell how much gas is left in running context.","Reads memory contents at the given offset into a buffer.","","","Get the id of the message currently being handled.","Access currently handled message payload.","Create empty ext","Produce reply to the current message.","Complete reply message and send it to source program.","Push an extra buffer into reply message.","Read the message id, if current message is a reply.","Send message to another program.","Complete message and send it to another program.","Initialize a new incomplete message for another program …","Push an extra buffer into message payload by handle.","Set ext","Set memory region at specific pointer.","Get the source of the message currently being handled.","","","","","","","","","","Unset inner ext","Value associated with message.","Interrupt the program and reschedule execution.","Wake the waiting message and move it to the processing …","Call fn with inner ext","Call fn with inner ext","The result of charging gas.","Error occured during decoding original program code.","Error occured during encoding instrumented program.","There was enough gas and it has been charged.","Gas counter.","Gas counter with some predifined maximum gas.","Gas counter with unlimited gas.","Error occured during injecting gas metering instructions.","Instrumentation error.","There was not enough gas and it hasn’t been charged.","","","","","","","","","Report how much gas is burned.","","","Charge some gas.","","","","","","","","","","","","","","Instrument code with gas-counting instructions.","","","","","Report how much gas is left.","","","New limited gas counter with initial gas to spend.","Reduce gas.","","","","","","","","","","","","","","","","Allocation is in use.","Memory error.","Specified page cannot be freed by the current program.","Memory interface for the allocator.","Out of bounds memory access","Memory context for the running program.","Memory is over.","A WebAssembly page has a constant size of 65,536 bytes, …","Page buffer.","Page number.","Specified page is occupied.","","Alloc specific number of pages for the currently running …","Return reference to the allocation manager.","Downcast to exact memory type","","","","","","","Clone this memory.","","","","","","","","Returns the base pointer, in the host’s address space, …","Returns the byte length of this memory.","","","","","","","","","","","Free specific page.","","","","","","Grow memory by number of pages.","","","","","Return reference to the memory blob.","","New memory context.","Return page offset.","","Return currently used program id.","Return raw 32-bit page address.","Reads memory contents at the given offset into a buffer.","Set memory pages from PageBuf map, grow if possible.","Return current size of the memory.","Return page size in bytes.","","","","","","","","","","","","","","","","Set memory region at specific pointer.","Duplicate reply message.","Duplicate waiting message.","Error using messages.","Exit code type for message replies","Incoming message.","An attempt to commit or to push a payload into an already …","Message limit exceeded.","Message.","Message context for the currently running program.","Message identifier.","Generator of message id.","Message state of the current session.","An attempt to push a payload into reply that was not set","No message found with given handle, or handle exceedes …","Outgoing message.","Outgoing message packet.","Message payload.","Reply message.","Reply message packet.","An attempt to interrupt execution with <code>wait(..)</code> while …","","Return mutable reference to raw bytes of this program id.","Raw bytes as reference.","Return reference to raw bytes of this program id.","","Messages to be waken.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Query current nonce.","Return reference to the current incoming message.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Empty packet with log dest.","","Return destination of this message.","Destination.","Destination of the message.","","","","","","","","","","","","","","","","Exit code","","","","","","","","","","","","","","","","","","","","","","","","","","","Create new message id from bytes.","Gas limit of the message.","Return declared gas_limit of the message.","Message gas limit.","Gas limit.","Gas limit of the reply message.","Gas limit.","Gas limit.","","","Id of the message.","Return message id generated for this packet.","Return message id generated for this packet.","Message idetifier.","Id of the message","","","","","","","","","","","","Convert incoming message to the stored message by …","Convert outgoing message to the stored message by …","Convert to generic message providing extra info.","Return raw bytes of the message payload.","Convert this context into the message state.","","","","","","New incoming message from specific <code>source</code>, <code>payload</code> and …","New outgoing message.","New system message to the specific program.","New outgoing message packet.","New reply message in some message context.","New context.","New reply message from specific <code>source</code>, <code>payload</code> and …","New system message to the specific program.","New system incoming message.","New system message to the specific program.","Generate next id.","Last used nonce","Collection of outgoing messages generated.","","Payload of the incoming message.","Get the payload reference of this message.","Payload.","Payload of the message.","Payload of the reply message.","Build outgoing message from current packet.","Build reply from reply packet.","What this message is a reply to","Is message a reply and to what.","In reply of.","Reply generated.","Record reply to the current message.","Push an extra buffer into reply message.","Mark message as fully formed and ready for sending in …","Initialize a new message with <code>NotFormed</code> formation status …","Push an extra buffer into message payload by handle.","Set gas limit of the message.","Source of the incoming message, if any.","Return source of this message.","Source of the message.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Value of the message.","Message value.","Value.","Message value.","Message value.","Add the current message to the wait list.","Message to be added to wait list.","Mark a message to be woken using <code>waker_id</code>.","Program.","Program identifier.","Return mutable reference to raw bytes of this program id.","Return reference to raw bytes of this program id.","","","","","Clear static area of this program.","","","","","","Reference to code of this program.","","","","","","","","","","","","","","","","Fetch and incremet message nonce","","","","","","","","Create new program id from bytes.","","Get reference to memory page.","Get mut reference to memory page.","Get reference to memory pages.","","Get the id of this program.","","","Message nonce.","","New program with specific <code>id</code>, <code>code</code> and <code>persistent_memory</code>.","","Reset the program.","Set the code of this program.","Set memory from buffer.","Set message nonce.","Set memory page from buffer.","Get initial memory size for this program.","System origin","","","","","","","","","","","","","In-memory message queue (for tests).","In-memory program storage (for tests).","Fully in-memory storage (for tests).","In-memory wait list (for tests).","Log.","Message map with id as a key.","Message queue storage.","Abstraction over program storage.","Storage.","Wait list for suspended messages.","","","","","","","","","","","","","","","","Dequeue next message.","","Check if program exists.","","","","","","","","","","","","Create a storage from messages queue, programs storage …","Get the program from the storage.","","Get all messages in log.","Insert a message to the wait list.","","","","","","","Log.","Message queue stoage.","Create an empty in-memory program storage.","Create an empty in-memory message queue.","New in-memory wait list.","Create an empty storage.","Program storage.","Put message to log.","Queue message.","","Queue many messages.","Remove the program from the storage.","Remove the message from the wait list and return it if …","","","Store program in the storage.","","","","","","","","","","","","","","","","","Wait list."],"i":[0,1,0,0,0,0,0,0,0,2,0,2,2,3,3,2,4,2,4,2,4,2,4,3,2,2,2,2,2,4,2,2,2,3,2,4,3,3,3,2,4,3,3,4,3,3,3,3,3,3,3,3,4,3,3,2,2,4,2,4,2,4,2,4,4,3,3,3,4,4,0,5,5,6,0,0,0,5,0,6,6,5,7,8,6,5,7,8,9,7,8,9,7,8,6,6,6,6,5,7,8,6,5,7,8,0,6,5,7,8,9,7,8,8,9,7,8,6,6,5,7,8,6,5,7,8,6,5,7,8,10,0,10,0,10,0,10,0,0,0,10,11,12,12,13,12,10,11,12,10,11,13,12,10,11,12,10,11,11,13,13,11,11,11,11,11,11,11,11,10,11,12,12,10,11,11,11,13,11,12,10,11,12,11,12,11,11,12,11,13,13,13,11,11,11,12,10,11,12,10,11,12,10,11,12,10,11,11,13,14,14,0,0,0,14,14,0,0,0,0,0,14,14,0,0,0,0,0,14,15,16,15,16,15,17,15,16,14,18,19,20,21,22,23,17,24,15,16,14,18,19,20,21,22,23,17,24,15,16,18,19,20,21,22,23,24,15,16,18,19,20,21,22,23,24,16,25,24,15,16,18,19,20,21,22,23,15,16,18,19,20,21,22,23,15,16,18,19,20,21,22,23,15,16,18,19,20,21,22,23,15,16,18,19,20,21,22,23,15,16,22,17,21,22,21,15,16,15,16,18,19,20,21,22,23,15,16,20,21,23,23,15,16,16,14,18,19,20,21,22,23,17,15,15,16,16,16,14,18,18,19,20,21,22,23,17,24,16,18,19,21,22,23,21,23,16,16,18,19,20,21,21,15,16,14,18,19,20,21,22,23,17,24,18,19,20,15,24,15,16,20,21,23,18,19,21,22,23,24,18,21,18,21,25,24,17,16,18,21,22,21,23,25,25,18,21,21,17,24,24,24,24,24,18,18,21,21,15,16,18,19,20,21,22,23,15,16,18,19,20,21,22,23,24,16,15,16,14,18,19,20,21,22,23,17,24,15,16,14,18,19,20,21,22,23,17,24,15,16,14,18,19,20,21,22,23,17,24,15,16,18,21,22,21,23,24,17,24,0,0,26,26,26,27,26,27,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,26,26,27,26,27,26,26,27,26,26,26,27,26,26,27,27,27,26,27,26,27,27,26,27,26,27,27,27,27,27,27,26,26,27,26,27,26,26,27,26,27,26,27,26,0,0,0,0,0,0,0,0,0,0,28,29,30,31,32,28,29,30,31,32,28,29,30,31,32,33,29,34,28,29,31,28,28,29,29,30,30,31,32,32,34,28,31,35,30,28,29,30,31,32,32,32,28,29,30,32,32,31,33,29,33,34,35,28,30,34,28,28,29,30,31,32,28,29,30,31,32,28,29,30,31,32,32],"f":[null,[[["inmemorywaitlist",3]],["messagemap",6]],null,null,null,null,null,null,null,null,null,null,null,[[["pagenumber",3]],[["result",6,["pagenumber","str"]],["str",15],["pagenumber",3]]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["pageaction",4]],[[]],[[]],[[]],[[["str",15]],[["result",6,["str"]],["str",15]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],["laterext",3]],[[]],[[["pageaction",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["pagenumber",3]],[["result",6,["str"]],["str",15]]],[[]],[[]],[[["u32",15]],[["result",6,["str"]],["str",15]]],[[],["u64",15]],[[["usize",15]]],[[]],[[]],[[],["messageid",3]],[[]],[[]],[[["replypacket",3]],[["messageid",3],["result",6,["messageid","str"]],["str",15]]],[[["replypacket",3]],[["messageid",3],["result",6,["messageid","str"]],["str",15]]],[[],[["result",6,["str"]],["str",15]]],[[],["option",4]],[[["outgoingpacket",3]],[["messageid",3],["result",6,["messageid","str"]],["str",15]]],[[["usize",15],["outgoingpacket",3]],[["messageid",3],["result",6,["messageid","str"]],["str",15]]],[[],[["usize",15],["result",6,["usize","str"]],["str",15]]],[[["usize",15]],[["result",6,["str"]],["str",15]]],[[]],[[["usize",15]]],[[],["programid",3]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["u128",15]],[[],[["result",6,["str"]],["str",15]]],[[["messageid",3],["u64",15]],[["result",6,["str"]],["str",15]]],[[],[["str",15],["result",6,["str"]]]],[[],[["str",15],["result",6,["str"]]]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["u64",15]],["chargeresult",4]],[[["u64",15]],["chargeresult",4]],[[["u64",15]],["chargeresult",4]],[[],["chargeresult",4]],[[]],[[["chargeresult",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["result",4,["vec","instrumenterror"]],["instrumenterror",4]]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["u64",15]]],[[["u64",15]],["chargeresult",4]],[[["u64",15]],["chargeresult",4]],[[["u64",15]],["chargeresult",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[["pagenumber",3]],[["pagenumber",3],["error",4],["result",4,["pagenumber","error"]]]],[[],["btreeset",3]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["memory",8],["box",3,["memory"]]]],[[]],[[],["error",4]],[[],["pagenumber",3]],[[]],[[]],[[]],[[["pagenumber",3]],["ordering",4]],[[]],[[],["usize",15]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[["pagenumber",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["pagenumber",3]],[["result",4,["error"]],["error",4]]],[[]],[[]],[[["u32",15]],["pagenumber",3]],[[]],[[],["u64",15]],[[["pagenumber",3]],[["pagenumber",3],["error",4],["result",4,["pagenumber","error"]]]],[[]],[[]],[[]],[[]],[[],["memory",8]],[[["pagenumber",3]],["bool",15]],[[["memory",8],["pagenumber",3],["programid",3],["btreeset",3,["pagenumber"]],["box",3,["memory"]]]],[[],["usize",15]],[[["pagenumber",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["programid",3]],[[],["u32",15]],[[["usize",15]]],[[["btreemap",3]],[["result",4,["error"]],["error",4]]],[[],["pagenumber",3]],[[],["usize",15]],[[]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["fnonce",8]]],[[["usize",15]],[["result",4,["error"]],["error",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["payload",3]],[[],["messageid",3]],[[],["incomingmessage",3]],[[],["outgoingmessage",3]],[[],["replymessage",3]],[[],["message",3]],[[],["outgoingpacket",3]],[[],["replypacket",3]],[[],["messagecontext",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["messageid",3]],["ordering",4]],[[],["u64",15]],[[],["incomingmessage",3]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],["payload",3]],[[],["messageid",3]],[[]],[[],["messagestate",3]],[[],["programid",3]],[[],["programid",3]],null,[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["payload",3]],["bool",15]],[[["messageid",3]],["bool",15]],[[["replymessage",3]],["bool",15]],[[["message",3]],["bool",15]],[[["replypacket",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["vec",3,["u8"]],["u8",15]],["payload",3]],[[]],[[],["messageid",3]],[[["u64",15]]],[[]],[[]],[[["message",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],null,null,[[],["u64",15]],[[]],[[],["messageid",3]],[[],["messageid",3]],[[],["messageid",3]],[[],["messageid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["programid",3]],["message",3]],[[["programid",3]],["message",3]],[[["messageid",3],["programid",3]],["message",3]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["messagestate",3]],[[["payload",3]],["bool",15]],[[["messageid",3]],["bool",15]],[[["replymessage",3]],["bool",15]],[[["message",3]],["bool",15]],[[["replypacket",3]],["bool",15]],[[["messageid",3],["payload",3],["programid",3],["u64",15],["u128",15]]],[[["messageid",3],["payload",3],["programid",3],["u64",15],["u128",15]]],[[["messageid",3],["payload",3],["programid",3],["u64",15],["u128",15]],["message",3]],[[["payload",3],["u64",15],["programid",3],["u128",15]]],[[["payload",3],["u64",15],["exitcode",6],["u128",15]]],[[["incomingmessage",3]],["messagecontext",3]],[[["messageid",3],["payload",3],["programid",3],["u64",15],["exitcode",6],["u128",15]]],[[["messageid",3],["payload",3],["programid",3],["u64",15],["exitcode",6],["u128",15]],["message",3]],[[["messageid",3],["payload",3],["u64",15],["u128",15]]],[[["messageid",3],["payload",3],["programid",3],["u64",15],["u128",15]],["message",3]],[[],["messageid",3]],[[],["u64",15]],null,[[["messageid",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],null,null,[[["outgoingpacket",3]],["outgoingmessage",3]],[[["replypacket",3]],["replymessage",3]],[[],["option",4]],[[],["option",4]],null,null,[[["replypacket",3]],[["messageid",3],["error",4],["result",4,["messageid","error"]]]],[[],[["result",4,["error"]],["error",4]]],[[["usize",15],["outgoingpacket",3]],[["messageid",3],["error",4],["result",4,["messageid","error"]]]],[[],[["usize",15],["error",4],["result",4,["usize","error"]]]],[[["usize",15]],[["result",4,["error"]],["error",4]]],[[["u64",15]]],[[],["programid",3]],[[],["programid",3]],null,[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["fnonce",8]]],[[["fnonce",8]]],[[],["u128",15]],[[],["u128",15]],[[],["u128",15]],null,null,[[],[["result",4,["error"]],["error",4]]],null,[[["messageid",3],["u64",15]],[["result",4,["error"]],["error",4]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["programid",3]],[[],["program",3]],[[]],[[]],[[["programid",3]],["ordering",4]],[[]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],["programid",3]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[["programid",3]],["bool",15]],[[],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["u64",15]]],[[],["programid",3]],[[]],[[]],[[]],[[],["u64",15]],[[["pagenumber",3]],[["option",4,["box"]],["box",3]]],[[["pagenumber",3]],[["box",3],["option",4,["box"]]]],[[],["btreemap",3]],[[]],[[],["programid",3]],[[]],[[]],[[],["u64",15]],[[["programid",3]],["bool",15]],[[["u8",15],["programid",3],["u32",15],["vec",3,["u8"]],["btreemap",3,["u32","vec"]]],["result",6]],[[["programid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["vec",3,["u8"]],["u8",15]],["result",6]],[[["vec",3,["u8"]],["u8",15]],["result",6]],[[],["result",6]],[[["u64",15]]],[[["pagenumber",3]],["result",6]],[[],["u32",15]],[[]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["fnonce",8]]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["inmemoryprogramstorage",3]],[[],["inmemorymessagequeue",3]],[[],["inmemorywaitlist",3]],[[],["log",3]],[[],["storage",3]],[[],[["message",3],["option",4,["message"]]]],[[],[["message",3],["option",4,["message"]]]],[[["programid",3]],["bool",15]],[[["programid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["vec",3,["program"]],["program",3]]],[[]],[[["vec",3,["message"]],["message",3]]],[[["messagemap",6]]],[[]],[[]],[[]],[[["log",3]]],[[["programid",3]],[["option",4,["program"]],["program",3]]],[[["programid",3]],[["option",4,["program"]],["program",3]]],[[]],[[["messageid",3],["message",3]]],[[["messageid",3],["message",3]]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],null,[[["message",3]]],[[["message",3]]],[[["message",3]]],[[["vec",3,["message"]],["message",3]]],[[["programid",3]],[["option",4,["program"]],["program",3]]],[[["messageid",3]],[["message",3],["option",4,["message"]]]],[[["programid",3]],[["option",4,["program"]],["program",3]]],[[["messageid",3]],[["message",3],["option",4,["message"]]]],[[["program",3]],[["option",4,["program"]],["program",3]]],[[["program",3]],[["option",4,["program"]],["program",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[6,"MessageMap"],[4,"PageAction"],[8,"Ext"],[3,"LaterExt"],[4,"InstrumentError"],[4,"ChargeResult"],[3,"GasCounterUnlimited"],[3,"GasCounterLimited"],[8,"GasCounter"],[4,"Error"],[3,"PageNumber"],[3,"MemoryContext"],[8,"Memory"],[4,"Error"],[3,"Payload"],[3,"MessageId"],[3,"MessageState"],[3,"IncomingMessage"],[3,"OutgoingMessage"],[3,"ReplyMessage"],[3,"Message"],[3,"OutgoingPacket"],[3,"ReplyPacket"],[3,"MessageContext"],[8,"MessageIdGenerator"],[3,"ProgramId"],[3,"Program"],[3,"InMemoryProgramStorage"],[3,"InMemoryMessageQueue"],[3,"InMemoryWaitList"],[3,"Log"],[3,"Storage"],[8,"MessageQueue"],[8,"ProgramStorage"],[8,"WaitList"]]},\
"gstd":{"doc":"","t":[12,12,3,3,11,11,14,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,11,11,11,11,11,11,11,5,5,5,5,3,11,11,11,11,11,11,11,11,5,11,11,5,5,11,11,5,5,5,5,5,5,5,5,5,11,11,11,11,5,11,3,3,16,8,16,3,8,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,16,16,8,8,4,8,8,8,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,5,10,11,11,11,11,10,11,10,11,11,3,3,19,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,5,5,11,5,11,11,11,5,5,5,5,11,11,11,11,5,5,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,5,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,16,3,8,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,5,11,11,11,11,11,11,11,11,11,5,11,5,11,5,11,11,11,11,11,11,5,11,11,5,5,11,11,5,5,5,5,11,5,11,5,5,5,11,11,11,11,11,11,11,11,11,5,5,5,5,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","MessageId","ProgramId","as_slice","as_slice","bail","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","debug","default","default","eq","eq","exec","fmt","fmt","from","from","from","from_slice","from_slice","hash","hash","into","into","msg","ne","ne","partial_cmp","partial_cmp","prelude","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","block_height","gas_available","wait","wake","MessageHandle","borrow","borrow_mut","clone","clone_into","commit","eq","fmt","from","id","init","into","load","load_bytes","ne","push","reply","reply_bytes","reply_commit","reply_push","reply_to","send","send_bytes","send_init","source","to_owned","try_from","try_into","type_id","value","write","BTreeMap","Box","Err","FromStr","Owned","String","ToOwned","ToString","Vec","VecDeque","add","add_assign","allocator","allocator","and","and","append","append","append","append_or_new","append_or_new","as_byte_slice","as_byte_slice","as_byte_slice","as_bytes","as_mut","as_mut","as_mut","as_mut","as_mut_byte_slice","as_mut_byte_slice","as_mut_ptr","as_mut_slice","as_mut_slice_of","as_mut_slice_of","as_mut_slices","as_mut_str","as_mut_vec","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice_of","as_slice_of","as_slice_of","as_slices","as_str","assume_init","assume_init","back","back_mut","binary_search","binary_search_by","binary_search_by_key","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","call_once","capacity","capacity","capacity","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_from","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","contains","contains_key","convert","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_and_advance_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","dedup","dedup_by","dedup_by_key","default","default","default","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drain","drain","drain","drain_filter","drain_filter","drop","drop","drop","drop","encode","encode","encode","encode_to","encode_to","encode_to","encode_to","encode_to","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_from_slice","extend_from_within","extend_from_within","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extend_reserve","finish","first_entry","first_key_value","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw","from_raw_in","from_raw_parts","from_raw_parts","from_raw_parts_in","from_str","from_str","from_utf16","from_utf16_lossy","from_utf8","from_utf8_lossy","from_utf8_unchecked","front","front_mut","ge","get","get","get_key_value","get_mut","get_mut","gt","hash","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert","insert","insert","insert_str","into","into","into","into","into","into_boxed_slice","into_boxed_slice","into_boxed_str","into_bytes","into_future","into_inner","into_iter","into_iter","into_iter","into_iter","into_keys","into_pin","into_raw","into_raw_parts","into_raw_parts","into_raw_parts_with_alloc","into_raw_with_allocator","into_searcher","into_values","is_contained_in","is_empty","is_empty","is_empty","is_empty","is_empty","is_prefix_of","is_suffix_of","iter","iter","iter_mut","iter_mut","keys","last","last_entry","last_key_value","le","leak","leak","len","len","len","len","len","len","len","len","lt","make_contiguous","mem","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new_in","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","next","next_back","nth","nth_back","panic","panic","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partition_point","pin","pin_in","poll","poll_next","pop","pop","pop_back","pop_first","pop_front","pop_last","ptr","push","push","push_back","push_front","push_str","range","range","range_mut","range_mut","remove","remove","remove","remove","remove_entry","remove_matches","replace_range","reserve","reserve","reserve","reserve_exact","reserve_exact","reserve_exact","resize","resize","resize_with","resize_with","resume","retain","retain","retain","retain","rotate_left","rotate_right","set_len","shrink_to","shrink_to","shrink_to","shrink_to_fit","shrink_to_fit","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","spare_capacity_mut","splice","split_at_spare_mut","split_off","split_off","split_off","split_off","strip_prefix_of","strip_suffix_of","swap","swap_remove","swap_remove_back","swap_remove_front","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","truncate","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_zeroed","try_new_zeroed_in","try_reserve","try_reserve","try_reserve","try_reserve_exact","try_reserve_exact","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","using_encoded","using_encoded","using_encoded","values","values_mut","vec","vec","with_capacity","with_capacity","with_capacity","with_capacity_in","write","write","write_char","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","AsMut","AsRef","Error","Error","FloatToInt","From","Infallible","Into","TryFrom","TryInto","as_mut","as_ref","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","from","from","from","from","hash","identity","into","into","partial_cmp","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","Discriminant","ManuallyDrop","MaybeUninit","align_of","align_of_val","align_of_val_raw","array_assume_init","as_mut_ptr","as_ptr","assume_init","assume_init_drop","assume_init_mut","assume_init_read","assume_init_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","deref","deref_mut","discriminant","drop","drop","eq","eq","fmt","fmt","fmt","forget","forget_unsized","from","from","from","hash","hash","into","into","into","into_inner","min_align_of","min_align_of_val","ne","needs_drop","new","new","partial_cmp","replace","size_of","size_of_val","size_of_val_raw","slice_as_mut_ptr","slice_as_ptr","slice_assume_init_mut","slice_assume_init_ref","swap","take","take","to_owned","to_owned","to_owned","transmute","transmute_copy","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uninit","uninit_array","uninitialized","variant_count","write","write_slice","write_slice_cloned","zeroed","zeroed","Location","PanicInfo","borrow","borrow","borrow_mut","borrow_mut","caller","clone","clone_into","cmp","column","eq","file","fmt","fmt","fmt","fmt","from","from","hash","into","into","line","location","message","ne","partial_cmp","payload","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","DynMetadata","Metadata","NonNull","Pointee","addr_of","addr_of_mut","align_of","as_mut","as_mut_ptr","as_non_null_ptr","as_ptr","as_ref","as_uninit_mut","as_uninit_ref","as_uninit_slice","as_uninit_slice_mut","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","cmp","copy","copy_nonoverlapping","dangling","drop_in_place","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from_raw_parts","from_raw_parts","from_raw_parts_mut","get_unchecked_mut","hash","hash","hash","into","into","layout","len","metadata","new","new_unchecked","null","null_mut","partial_cmp","partial_cmp","read","read_unaligned","read_volatile","replace","size_of","slice_from_raw_parts","slice_from_raw_parts","slice_from_raw_parts_mut","swap","swap_nonoverlapping","to_owned","to_owned","to_raw_parts","try_from","try_from","try_into","try_into","type_id","type_id","write","write_bytes","write_unaligned","write_volatile","Drain","DrainFilter","IntoIter","Splice","Vec","allocator","allocator","allocator","as_byte_slice","as_byte_slice","as_mut_slice","as_ref","as_ref","as_slice","as_slice","as_slice_of","as_slice_of","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","count","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","next","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["gstd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gstd::exec","","","","gstd::msg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gstd::preludegstd::prelude::convert","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gstd::prelude::mem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gstd::prelude::panic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gstd::prelude::ptr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gstd::prelude::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Message identifier.","Program identifier.","Get <code>MessageId</code> represented as a slice of <code>u8</code>.","Get <code>ProgramId</code> represented as a slice of <code>u8</code>.","","","","","","","","","","","","","","","","","Sys calls related to the program execution flow.","","","","","","Create a new <code>MessageId</code> from the 32-byte slice <code>s</code>.","Create a new ProgramId from 32-byte slice <code>s</code>.","","","","","","","","","","","","","","","","","","","Get the current block height.","Get the current value of the gas available for execution.","Pause the current message handling.","Resume previously paused message handling.","","","","","","","","","","Obtain an identifier of the message currently being …","","","","","","","","","","","Get an identifier of the initial message which the …","","","","Get the 256-bit address of the message source.","","","","","Get the value associated with the message being processed.","","A map based on a B-Tree.","A pointer type for heap allocation.","The associated error which can be returned from parsing.","Parse a value from a string","The resulting type after obtaining ownership.","A UTF-8–encoded, growable string.","A generalization of <code>Clone</code> to borrowed data.","A trait for converting a value to a <code>String</code>.","A contiguous growable array type, written as <code>Vec<T></code> and …","A double-ended queue implemented with a growable ring …","","","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","","","Moves all elements from <code>other</code> into <code>Self</code>, leaving <code>other</code> …","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> …","","","","","","Returns a byte slice of this <code>String</code>’s contents.","","","","","","","Returns an unsafe mutable pointer to the vector’s …","Extracts a mutable slice of the entire vector.","","","Returns a pair of slices which contain, in order, the …","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>…","Returns a raw pointer to the vector’s buffer.","","","","","","Extracts a slice containing the entire vector.","","","","Returns a pair of slices which contain, in order, the …","Extracts a string slice containing the entire <code>String</code>.","Converts to <code>Box<[T], A></code>.","Converts to <code>Box<T, A></code>.","Provides a reference to the back element, or <code>None</code> if the …","Provides a mutable reference to the back element, or <code>None</code> …","Binary searches this sorted <code>VecDeque</code> for a given element.","Binary searches this sorted <code>VecDeque</code> with a comparator …","Binary searches this sorted <code>VecDeque</code> with a key …","","","","","","","","","","","","","","","","","","","","Returns the number of elements the <code>VecDeque</code> can hold …","Returns the number of elements the vector can hold without…","Returns this <code>String</code>’s capacity, in bytes.","Clears the map, removing all elements.","Clears the <code>VecDeque</code>, removing all values.","Clears the vector, removing all values.","Truncates this <code>String</code>, removing all contents.","","","Returns a new box with a <code>clone()</code> of this box’s contents.","","","","","Copies <code>source</code>’s contents into <code>self</code> without creating a …","","","","","","Uses borrowed data to replace owned data, usually by …","","","","","","","","","","Returns <code>true</code> if the <code>VecDeque</code> contains an element equal to …","Returns <code>true</code> if the map contains a value for the …","Traits for conversions between types.","","","","","","","","","","","","","","","","","","","","","","","","","","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates a <code>Box<T></code>, with the <code>Default</code> value for T.","","","Creates an empty <code>BTreeMap</code>.","Creates an empty <code>VecDeque<T></code>.","Creates an empty <code>Vec<T></code>.","Creates an empty <code>String</code>.","","","","","","","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","Creates an iterator that visits all elements (key-value …","Creates an iterator which uses a closure to determine if …","","","","","","","","","","","","","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","Copies elements from <code>src</code> range to the end of the string.","","","","","","","","","","","","","","","","","","","Returns the first entry in the map for in-place …","Returns the first key-value pair in the map. The key in …","","","","","","","","","Creates a <code>String</code> using interpolation of runtime …","","","Converts a <code>T</code> into a <code>Box<T></code>","","Converts a <code>&str</code> into a <code>Box<str></code>","Converts a <code>Box<str></code> into a <code>Box<[u8]></code>","Convert a vector into a boxed slice.","Converts a <code>[T; N]</code> into a <code>Box<[T]></code>","Converts a <code>&[T]</code> into a <code>Box<[T]></code>","Converts the given <code>String</code> to a boxed <code>str</code> slice that is …","","","","Turn a <code>Vec<T></code> into a <code>VecDeque<T></code>.","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Allocate a <code>Vec<u8></code> and fill it with a UTF-8 string.","","Converts a <code>BinaryHeap<T></code> into a <code>Vec<T></code>.","","Allocate a <code>Vec<T></code> and fill it by cloning <code>s</code>’s items.","Convert a boxed slice into a vector by transferring …","Turn a <code>VecDeque<T></code> into a <code>Vec<T></code>.","Allocate a <code>Vec<T></code> and fill it by cloning <code>s</code>’s items.","Convert a clone-on-write slice into a vector.","Converts a clone-on-write string to an owned instance of …","Converts the given boxed <code>str</code> slice to a <code>String</code>. It is …","","Converts a <code>&mut str</code> into a <code>String</code>.","Converts a <code>&str</code> into a <code>String</code>.","Converts a <code>&String</code> into a <code>String</code>.","Allocates an owned <code>String</code> from a single character.","","","","","","","","","","","Constructs a box from a raw pointer.","Constructs a box from a raw pointer in the given …","Creates a <code>Vec<T></code> directly from the raw components of …","Creates a new <code>String</code> from a length, capacity, and pointer.","Creates a <code>Vec<T, A></code> directly from the raw components of …","Parses a string <code>s</code> to return a value of this type.","","Decode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …","Decode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing…","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","Provides a reference to the front element, or <code>None</code> if the …","Provides a mutable reference to the front element, or <code>None</code>…","","Returns a reference to the value corresponding to the key.","Provides a reference to the element at the given index.","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","Provides a mutable reference to the element at the given …","","","","","","","Returns a reference to the value corresponding to the …","","","","","","","","","","","","","","","","","Inserts a key-value pair into the map.","Inserts an element at <code>index</code> within the <code>VecDeque</code>, shifting …","Inserts an element at position <code>index</code> within the vector, …","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte …","","","","","","Converts a <code>Box<T></code> into a <code>Box<[T]></code>","Converts the vector into <code>Box<[T]></code>.","Converts this <code>String</code> into a <code>Box</code><code><</code><code>str</code><code>></code>.","Converts a <code>String</code> into a byte vector.","","Consumes the <code>Box</code>, returning the wrapped value.","","","Consumes the <code>VecDeque</code> into a front-to-back iterator …","Creates a consuming iterator, that is, one that moves …","Creates a consuming iterator visiting all the keys, in …","Converts a <code>Box<T></code> into a <code>Pin<Box<T>></code>","Consumes the <code>Box</code>, returning a wrapped raw pointer.","Decomposes a <code>Vec<T></code> into its raw components.","Decomposes a <code>String</code> into its raw components.","Decomposes a <code>Vec<T></code> into its raw components.","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …","","Creates a consuming iterator visiting all the values, in …","","","Returns <code>true</code> if the map contains no elements.","Returns <code>true</code> if the <code>VecDeque</code> is empty.","Returns <code>true</code> if the vector contains no elements.","Returns <code>true</code> if this <code>String</code> has a length of zero, and …","","","Gets an iterator over the entries of the map, sorted by …","Returns a front-to-back iterator.","Gets a mutable iterator over the entries of the map, …","Returns a front-to-back iterator that returns mutable …","Gets an iterator over the keys of the map, in sorted …","","Returns the last entry in the map for in-place …","Returns the last key-value pair in the map. The key in …","","Consumes and leaks the <code>Box</code>, returning a mutable reference,…","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","","Returns the number of elements in the map.","","","Returns the number of elements in the <code>VecDeque</code>.","Returns the number of elements in the vector, also …","","Returns the length of this <code>String</code>, in bytes, not <code>char</code>s or …","","Rearranges the internal storage of this deque so it is …","Basic functions for dealing with memory.","","","","","","","","","","","","Allocates memory on the heap and then places <code>x</code> into it.","Makes a new, empty <code>BTreeMap</code>.","Creates an empty <code>VecDeque</code>.","Constructs a new, empty <code>Vec<T></code>.","Creates a new empty <code>String</code>.","Allocates memory in the given allocator then places <code>x</code> …","Constructs a new, empty <code>Vec<T, A></code>.","Constructs a new box with uninitialized contents.","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents.","Constructs a new boxed slice with uninitialized contents …","Constructs a new <code>Box</code> with uninitialized contents, with …","Constructs a new <code>Box</code> with uninitialized contents, with …","Constructs a new boxed slice with uninitialized contents, …","Constructs a new boxed slice with uninitialized contents …","","","","","Panic support in the standard library.","Panics the current thread.","","","","","","Returns the index of the partition point according to the …","Constructs a new <code>Pin<Box<T>></code>. If <code>T</code> does not implement …","Constructs a new <code>Pin<Box<T, A>></code>. If <code>T</code> does not implement …","","","Removes the last element from a vector and returns it, or …","Removes the last character from the string buffer and …","Removes the last element from the <code>VecDeque</code> and returns …","Removes and returns the first element in the map. The key …","Removes the first element and returns it, or <code>None</code> if the …","Removes and returns the last element in the map. The key …","Manually manage memory through raw pointers.","Appends an element to the back of a collection.","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends an element to the back of the <code>VecDeque</code>.","Prepends an element to the <code>VecDeque</code>.","Appends a given string slice onto the end of this <code>String</code>.","Constructs a double-ended iterator over a sub-range of …","Creates an iterator that covers the specified range in …","Constructs a mutable double-ended iterator over a …","Creates an iterator that covers the specified mutable …","Removes a key from the map, returning the value at the …","Removes and returns the element at <code>index</code> from the <code>VecDeque</code>…","Removes and returns the element at position <code>index</code> within …","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Removes a key from the map, returning the stored key and …","Remove all matches of pattern <code>pat</code> in the <code>String</code>.","Removes the specified range in the string, and replaces …","Reserves capacity for at least <code>additional</code> more elements …","Reserves capacity for at least <code>additional</code> more elements …","Ensures that this <code>String</code>’s capacity is at least …","Reserves the minimum capacity for exactly <code>additional</code> more …","Reserves the minimum capacity for exactly <code>additional</code> more …","Ensures that this <code>String</code>’s capacity is <code>additional</code> bytes …","Modifies the <code>VecDeque</code> in-place so that <code>len()</code> is equal to …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Modifies the <code>VecDeque</code> in-place so that <code>len()</code> is equal to …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the characters specified by the predicate.","Rotates the double-ended queue <code>mid</code> places to the left.","Rotates the double-ended queue <code>k</code> places to the right.","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the <code>VecDeque</code> with a lower bound.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of this <code>String</code> with a lower bound.","Shrinks the capacity of the <code>VecDeque</code> as much as possible.","Shrinks the capacity of the vector as much as possible.","Shrinks the capacity of this <code>String</code> to match its length.","","","","","","","","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given key. Returns …","Splits the <code>VecDeque</code> into two at the given index.","Splits the collection into two at the given index.","Splits the string into two at the given byte index.","","","Swaps elements at indices <code>i</code> and <code>j</code>.","Removes an element from the vector and returns it.","Removes an element from anywhere in the <code>VecDeque</code> and …","Removes an element from anywhere in the <code>VecDeque</code> and …","","","","","","Creates owned data from borrowed data, usually by cloning.","","","","","","Converts the given value to a <code>String</code>.","","","","Shortens the <code>VecDeque</code>, keeping the first <code>len</code> elements and …","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>String</code> to the specified length.","","","","","","","Tries to insert a key-value pair into the map, and returns…","","","","","","Allocates memory on the heap then places <code>x</code> into it, …","Allocates memory in the given allocator then places <code>x</code> …","Constructs a new box with uninitialized contents on the …","Constructs a new box with uninitialized contents in the …","Constructs a new <code>Box</code> with uninitialized contents, with …","Constructs a new <code>Box</code> with uninitialized contents, with …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for exactly …","Tries to reserve the minimum capacity for exactly …","Tries to reserve the minimum capacity for exactly …","","","","","","","","","Gets an iterator over the values of the map, in order by …","Gets a mutable iterator over the values of the map, in …","A contiguous growable array type with heap-allocated …","Creates a <code>Vec</code> containing the arguments.","Creates an empty <code>VecDeque</code> with space for at least <code>capacity</code>…","Constructs a new, empty <code>Vec<T></code> with the specified …","Creates a new empty <code>String</code> with a particular capacity.","Constructs a new, empty <code>Vec<T, A></code> with the specified …","","","","","","","","","","","","","","","","","Used to do a cheap mutable-to-mutable reference …","Used to do a cheap reference-to-reference conversion.","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","Supporting trait for inherent methods of <code>f32</code> and <code>f64</code> such …","Used to do value-to-value conversions while consuming the …","The error type for errors that can never happen.","A value-to-value conversion that consumes the input …","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","Performs the conversion.","Performs the conversion.","","","","","","","","","Performs the conversion.","","","","","The identity function.","Performs the conversion.","","","","","Performs the conversion.","","Performs the conversion.","","","Opaque type representing the discriminant of an enum.","A wrapper to inhibit compiler from automatically calling <code>T</code>…","A wrapper type to construct uninitialized instances of <code>T</code>.","Returns the ABI-required minimum alignment of a type.","Returns the ABI-required minimum alignment of the type of …","Returns the ABI-required minimum alignment of the type of …","Extracts the values from an array of <code>MaybeUninit</code> …","Gets a mutable pointer to the contained value. Reading …","Gets a pointer to the contained value. Reading from this …","Extracts the value from the <code>MaybeUninit<T></code> container. …","Drops the contained value in place.","Gets a mutable (unique) reference to the contained value.","Reads the value from the <code>MaybeUninit<T></code> container. The …","Gets a shared reference to the contained value.","","","","","","","","","","","","","","","","","Returns a value uniquely identifying the enum variant in <code>v</code>…","Disposes of a value.","Manually drops the contained value. This is exactly …","","","","","","Takes ownership and “forgets” about the value <strong>without …","Like <code>forget</code>, but also accepts unsized values.","","","","","","","","","Extracts the value from the <code>ManuallyDrop</code> container.","Returns the ABI-required minimum alignment of a type.","Returns the ABI-required minimum alignment of the type of …","","Returns <code>true</code> if dropping values of type <code>T</code> matters.","Wrap a value to be manually dropped.","Creates a new <code>MaybeUninit<T></code> initialized with the given …","","Moves <code>src</code> into the referenced <code>dest</code>, returning the …","Returns the size of a type in bytes.","Returns the size of the pointed-to value in bytes.","Returns the size of the pointed-to value in bytes.","Gets a mutable pointer to the first element of the array.","Gets a pointer to the first element of the array.","Assuming all the elements are initialized, get a mutable …","Assuming all the elements are initialized, get a slice to …","Swaps the values at two mutable locations, without …","Replaces <code>dest</code> with the default value of <code>T</code>, returning the …","Takes the value from the <code>ManuallyDrop<T></code> container out.","","","","Reinterprets the bits of a value of one type as another …","Interprets <code>src</code> as having type <code>&U</code>, and then reads <code>src</code> …","","","","","","","","","","Creates a new <code>MaybeUninit<T></code> in an uninitialized state.","Create a new array of <code>MaybeUninit<T></code> items, in an …","Bypasses Rust’s normal memory-initialization checks by …","Returns the number of variants in the enum type <code>T</code>.","Sets the value of the <code>MaybeUninit<T></code>.","Copies the elements from <code>src</code> to <code>this</code>, returning a mutable …","Clones the elements from <code>src</code> to <code>this</code>, returning a mutable …","Returns the value of type <code>T</code> represented by the all-zero …","Creates a new <code>MaybeUninit<T></code> in an uninitialized state, …","A struct containing information about the location of a …","A struct providing information about a panic.","","","","","Returns the source location of the caller of this …","","","","Returns the column from which the panic originated.","","Returns the name of the source file from which the panic …","","","","","","","","","","Returns the line number from which the panic originated.","Returns information about the location from which the …","If the <code>panic!</code> macro from the <code>core</code> crate (not from <code>std</code>) …","","","Returns the payload associated with the panic.","","","","","","","","","","The metadata for a <code>Dyn = dyn SomeTrait</code> trait object type.","The type for metadata in pointers and references to <code>Self</code>.","<code>*mut T</code> but non-zero and covariant.","Provides the pointer metadata type of any pointed-to type.","Create a <code>const</code> raw pointer to a place, without creating …","Create a <code>mut</code> raw pointer to a place, without creating an …","Returns the alignment of the type associated with this …","Returns a unique reference to the value. If the value may …","Returns a raw pointer to the slice’s buffer.","Returns a non-null pointer to the slice’s buffer.","Acquires the underlying <code>*mut</code> pointer.","Returns a shared reference to the value. If the value may …","Returns a unique references to the value. In contrast to …","Returns a shared references to the value. In contrast to …","Returns a shared reference to a slice of possibly …","Returns a unique reference to a slice of possibly …","","","","","Casts to a pointer of another type.","","","","","","","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …","Creates a new <code>NonNull</code> that is dangling, but well-aligned.","Executes the destructor (if any) of the pointed-to value.","Compares raw pointers for equality.","","","","","","","","","","Forms a (possibly-wide) raw pointer from a data address …","Performs the same functionality as …","Performs the same functionality as <code>from_raw_parts</code>, except …","Returns a raw pointer to an element or subslice, without …","Hash a raw pointer.","","","","","Returns the size and alignment together as a <code>Layout</code>","Returns the length of a non-null raw slice.","Extract the metadata component of a pointer.","Creates a new <code>NonNull</code> if <code>ptr</code> is non-null.","Creates a new <code>NonNull</code>.","Creates a null raw pointer.","Creates a null mutable raw pointer.","","","Reads the value from <code>src</code> without moving it. This leaves …","Reads the value from <code>src</code> without moving it. This leaves …","Performs a volatile read of the value from <code>src</code> without …","Moves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code>…","Returns the size of the type associated with this vtable.","Forms a raw slice from a pointer and a length.","Creates a non-null raw slice from a thin pointer and a …","Performs the same functionality as <code>slice_from_raw_parts</code>, …","Swaps the values at two mutable locations of the same …","Swaps <code>count * size_of::<T>()</code> bytes between the two …","","","Decompose a (possibly wide) pointer into its address and …","","","","","","","Overwrites a memory location with the given value without …","Sets <code>count * size_of::<T>()</code> bytes of memory starting at …","Overwrites a memory location with the given value without …","Performs a volatile write of a memory location with the …","A draining iterator for <code>Vec<T></code>.","An iterator which uses a closure to determine if an …","An iterator that moves out of a vector.","A splicing iterator for <code>Vec</code>.","A contiguous growable array type, written as <code>Vec<T></code> and …","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","","","Returns the remaining items of this iterator as a mutable …","","","Returns the remaining items of this iterator as a slice.","Returns the remaining items of this iterator as a slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,0,0,1,2,0,1,2,1,2,1,2,1,2,1,2,0,1,2,1,2,0,1,2,1,2,2,1,2,1,2,1,2,0,1,2,1,2,0,1,2,1,2,1,2,1,2,0,0,0,0,0,3,3,3,3,3,3,3,3,0,3,3,0,0,3,3,0,0,0,0,0,0,0,0,0,3,3,3,3,0,3,0,0,4,0,5,0,0,0,0,0,6,6,7,8,9,8,10,9,8,9,8,7,8,6,6,7,8,8,6,7,8,8,8,7,8,9,6,6,8,7,8,8,6,6,8,7,8,6,9,6,7,7,9,9,9,9,9,7,7,10,9,8,8,6,6,7,7,10,9,8,8,6,6,7,7,7,9,8,6,10,9,8,6,7,7,7,10,9,8,6,7,7,9,8,6,7,5,10,9,8,6,7,10,9,8,6,9,10,0,7,10,9,8,6,7,10,9,8,6,7,10,9,8,6,7,10,9,8,6,7,10,9,8,6,8,8,8,7,7,7,10,9,8,6,7,8,6,7,8,6,7,7,7,9,8,6,10,8,7,10,9,8,7,8,6,7,10,9,8,6,10,7,10,9,9,9,9,9,9,9,8,8,8,8,8,8,6,6,6,6,10,10,9,9,8,8,6,6,6,6,6,6,8,8,6,10,10,9,9,8,8,6,6,6,6,6,9,9,8,8,6,6,7,10,10,7,7,7,10,9,8,6,6,0,7,7,7,7,7,7,7,7,7,7,7,10,9,9,8,8,8,8,8,8,8,8,8,8,6,6,6,6,6,6,6,7,10,9,8,6,6,6,6,6,6,7,7,8,6,8,4,6,6,6,6,6,6,9,9,7,10,9,10,10,9,7,7,10,9,8,6,10,9,8,6,6,6,6,6,6,9,8,6,6,6,6,6,6,10,9,8,6,6,7,10,9,8,6,7,8,6,6,7,7,7,10,9,8,10,7,7,8,6,8,7,7,10,7,7,10,9,8,6,7,7,10,9,10,9,10,7,10,10,7,7,8,7,10,10,9,9,8,8,6,7,9,0,7,8,8,8,8,8,8,6,6,6,6,7,10,9,8,6,7,8,7,7,7,7,7,7,7,7,7,7,7,7,0,0,7,10,9,8,6,9,7,7,7,7,8,6,9,10,9,10,0,8,6,9,9,6,10,9,10,9,10,9,8,6,10,6,6,9,8,6,9,8,6,9,8,9,8,7,10,9,8,6,9,9,8,9,8,6,9,8,6,7,7,7,10,9,8,6,8,8,8,10,9,8,6,7,7,9,8,9,9,7,10,9,8,6,5,7,10,9,8,6,11,7,6,6,9,8,6,7,7,10,9,8,6,10,7,10,9,8,6,7,7,7,7,7,7,9,8,6,9,8,6,7,10,9,8,6,7,8,6,10,10,0,0,9,8,6,8,7,8,6,7,7,7,7,7,7,6,7,7,7,7,7,7,0,0,12,13,0,0,0,0,0,0,14,15,16,16,16,16,16,16,16,16,17,16,16,16,16,0,18,16,16,16,16,13,16,12,16,16,0,0,0,0,0,0,19,19,19,19,19,19,19,19,20,21,19,20,21,19,20,21,19,20,21,19,21,21,21,21,0,0,21,20,21,20,21,19,0,0,20,21,19,20,21,20,21,19,21,0,0,21,0,21,19,21,0,0,0,0,19,19,19,19,0,0,21,20,21,19,0,0,20,21,19,20,21,19,20,21,19,19,19,0,0,19,19,19,0,19,0,0,22,23,22,23,23,23,23,23,23,23,23,22,22,23,23,22,23,23,22,23,23,22,22,23,23,22,23,22,23,22,23,22,23,22,23,0,24,0,0,0,0,25,26,26,26,26,26,26,26,26,26,25,26,25,26,26,25,26,25,26,25,26,0,0,26,0,0,25,26,25,26,26,25,26,26,26,0,26,0,26,0,25,26,25,26,25,26,0,26,26,0,0,25,26,0,0,0,0,25,0,26,0,0,0,25,26,26,25,26,25,26,25,26,0,0,0,0,0,0,0,0,0,27,28,29,27,28,28,27,28,27,28,27,28,27,28,29,30,27,28,29,30,28,28,28,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,27,28,29,30,27,28,30,27,28,29,30,28,27,28,29,30,27,28,29,30,27,28,29,30],"f":[null,null,null,null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["messageid",3]],[[],["programid",3]],[[]],[[]],[[["messageid",3]],["ordering",4]],[[["programid",3]],["ordering",4]],null,[[],["messageid",3]],[[],["programid",3]],[[["messageid",3]],["bool",15]],[[["programid",3]],["bool",15]],null,[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[["u64",15]],["programid",3]],[[],["messageid",3]],[[],["programid",3]],[[]],[[]],[[]],[[]],null,[[["messageid",3]],["bool",15]],[[["programid",3]],["bool",15]],[[["messageid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["programid",3]],[["option",4,["ordering"]],["ordering",4]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[],["u64",15]],[[]],[[["u64",15],["messageid",3]]],null,[[]],[[]],[[],["messagehandle",3]],[[]],[[["u64",15],["u128",15],["programid",3]],["messageid",3]],[[["messagehandle",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["messageid",3]],[[]],[[]],[[],[["result",4,["error"]],["decode",8],["error",3]]],[[],[["vec",3,["u8"]],["u8",15]]],[[["messagehandle",3]],["bool",15]],[[["asref",8]]],[[["u64",15],["encode",8],["u128",15]],["messageid",3]],[[["u64",15],["asref",8],["u128",15]],["messageid",3]],[[["u64",15],["u128",15]],["messageid",3]],[[["asref",8]]],[[],["messageid",3]],[[["u64",15],["encode",8],["programid",3],["u128",15]],["messageid",3]],[[["u64",15],["asref",8],["programid",3],["u128",15]],["messageid",3]],[[],["messagehandle",3]],[[],["programid",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u128",15]],[[]],null,null,null,null,null,null,null,null,null,null,[[["str",15]],["string",3]],[[["str",15]]],[[["box",3]]],[[]],[[]],[[]],[[["btreemap",3]]],[[["vecdeque",3]]],[[["vec",3]]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],[["vec",3,["u8","global"]],["result",4,["vec","error"]],["error",3]]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],[["vec",3,["u8","global"]],["result",4,["vec","error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[],["str",15]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[]],[[],["str",15]],[[],["vec",3]],[[]],[[]],[[],["vec",3]],[[]],[[],["str",15]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[],["str",15]],[[],["box",3]],[[],["box",3]],[[],["option",4]],[[],["option",4]],[[],[["usize",15],["result",4,["usize","usize"]]]],[[],[["usize",15],["result",4,["usize","usize"]]]],[[],[["usize",15],["result",4,["usize","usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["box",3]],[[],[["str",15],["global",3],["box",3,["str","global"]]]],[[],["box",3]],[[],["btreemap",3]],[[],["vecdeque",3]],[[],["vec",3]],[[],["string",3]],[[["box",3]]],[[["box",3]]],[[["vecdeque",3]]],[[["vec",3]]],[[["string",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3]],["ordering",4]],[[["btreemap",3]],["ordering",4]],[[["vecdeque",3]],["ordering",4]],[[["vec",3]],["ordering",4]],[[["string",3]],["ordering",4]],[[],["bool",15]],[[],["bool",15]],null,[[],[["error",3],["result",4,["error"]]]],[[],[["btreemap",3],["error",3],["result",4,["btreemap","error"]]]],[[],[["error",3],["result",4,["vecdeque","error"]],["vecdeque",3]]],[[],[["result",4,["vec","error"]],["vec",3,["global"]],["error",3]]],[[],[["string",3],["error",3],["result",4,["string","error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[],[["box",3,["global"]],["global",3]]],[[],[["box",3,["global"]],["global",3]]],[[],[["str",15],["global",3],["box",3,["str","global"]]]],[[],["btreemap",3]],[[],["vecdeque",3]],[[],[["vec",3,["global"]],["global",3]]],[[],["string",3]],[[]],[[]],[[],["str",15]],[[]],[[]],[[],["str",15]],[[],[["result",4,["box","box"]],["box",3],["box",3,["any"]]]],[[],[["result",4,["box","box"]],["box",3],["box",3,["any"]]]],[[],[["result",4,["box","box"]],["box",3],["box",3,["any"]]]],[[],["drain",3]],[[],["drain",3]],[[],["drain",3]],[[],["drainfilter",3]],[[],["drainfilter",3]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[],["entry",4]],[[["box",3]],["bool",15]],[[["btreemap",3]],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[["vecdeque",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["string",3]],["bool",15]],[[],["bool",15]],[[["cow",4]],["bool",15]],[[["str",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[["char",15]]],[[["str",15],["cow",4,["str"]]]],[[["char",15]]],[[["string",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["u64",15]],[[],[["option",4,["occupiedentry"]],["occupiedentry",3]]],[[],["option",4]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],null,[[]],[[]],[[],[["box",3,["global"]],["global",3]]],[[["cow",4]],[["box",3,["global"]],["global",3]]],[[["str",15]],[["str",15],["global",3],["box",3,["str","global"]]]],[[["box",3,["str"]],["str",15]],["box",3]],[[["vec",3]],["box",3]],[[],[["box",3,["global"]],["global",3]]],[[],[["box",3,["global"]],["global",3]]],[[["string",3]],[["str",15],["global",3],["box",3,["str","global"]]]],[[["cow",4,["str"]],["str",15]],[["str",15],["global",3],["box",3,["str","global"]]]],[[]],[[]],[[["vec",3,["global"]],["global",3]],["vecdeque",3]],[[["string",3]],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[["str",15]],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[["binaryheap",3]],[["vec",3,["global"]],["global",3]]],[[],[["vec",3,["global"]],["global",3]]],[[],[["vec",3,["global"]],["global",3]]],[[["box",3]],["vec",3]],[[["vecdeque",3]],[["vec",3,["global"]],["global",3]]],[[],[["vec",3,["global"]],["global",3]]],[[["cow",4]],[["vec",3,["global"]],["global",3]]],[[["str",15],["cow",4,["str"]]],["string",3]],[[["str",15],["global",3],["box",3,["str","global"]]],["string",3]],[[]],[[["str",15]],["string",3]],[[["str",15]],["string",3]],[[["string",3]],["string",3]],[[["char",15]],["string",3]],[[],[["box",3,["global"]],["global",3]]],[[],["btreemap",3]],[[],["vecdeque",3]],[[],[["vec",3,["global"]],["global",3]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["box",3,["global"]],["global",3]]],[[],["box",3]],[[["usize",15]],[["vec",3,["global"]],["global",3]]],[[["usize",15]],["string",3]],[[["usize",15]],["vec",3]],[[["str",15]],["result",4]],[[["str",15]],[["string",3],["result",4,["string"]]]],[[],[["string",3],["result",4,["string","fromutf16error"]],["fromutf16error",3]]],[[],["string",3]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],[["result",4,["string","fromutf8error"]],["string",3],["fromutf8error",3]]],[[],[["cow",4,["str"]],["str",15]]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],["string",3]],[[],["option",4]],[[],["option",4]],[[["box",3]],["bool",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["box",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15],["rangeto",3,["usize"]]],["str",15]],[[["usize",15],["rangeinclusive",3,["usize"]]],["str",15]],[[["usize",15],["rangetoinclusive",3,["usize"]]],["str",15]],[[["rangefull",3]],["str",15]],[[["usize",15],["rangefrom",3,["usize"]]],["str",15]],[[["usize",15],["range",3,["usize"]]],["str",15]],[[["usize",15]]],[[]],[[["usize",15],["range",3,["usize"]]],["str",15]],[[["usize",15],["rangeto",3,["usize"]]],["str",15]],[[["rangefull",3]],["str",15]],[[["usize",15],["rangefrom",3,["usize"]]],["str",15]],[[["usize",15],["rangeinclusive",3,["usize"]]],["str",15]],[[["usize",15],["rangetoinclusive",3,["usize"]]],["str",15]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["char",15]]],[[["usize",15],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[["box",3]],["box",3]],[[],["box",3]],[[],[["str",15],["global",3],["box",3,["str","global"]]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[["box",3]]],[[]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["intokeys",3]],[[["box",3]],[["pin",3,["box"]],["box",3]]],[[["box",3]]],[[]],[[]],[[]],[[["box",3]]],[[["str",15]],["charpredicatesearcher",3]],[[],["intovalues",3]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[],["iter",3]],[[],["iter",3]],[[],["itermut",3]],[[],["itermut",3]],[[],["keys",3]],[[],["option",4]],[[],[["option",4,["occupiedentry"]],["occupiedentry",3]]],[[],["option",4]],[[["box",3]],["bool",15]],[[["box",3]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["result",4,["usize","error"]],["error",3]]],[[],[["usize",15],["result",4,["usize","error"]],["error",3]]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["result",4,["usize","error"]],["error",3]]],[[],["usize",15]],[[["box",3]],["bool",15]],[[]],null,[[["box",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["string",3]],["bool",15]],[[["cow",4]],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],[["box",3,["global"]],["global",3]]],[[],["btreemap",3]],[[],["vecdeque",3]],[[],[["vec",3,["global"]],["global",3]]],[[],["string",3]],[[],["box",3]],[[],["vec",3]],[[],[["maybeuninit",19],["global",3],["box",3,["maybeuninit","global"]]]],[[],[["maybeuninit",19],["box",3,["maybeuninit"]]]],[[["usize",15]],[["global",3],["box",3,["global"]]]],[[["usize",15]],["box",3]],[[],[["maybeuninit",19],["global",3],["box",3,["maybeuninit","global"]]]],[[],[["maybeuninit",19],["box",3,["maybeuninit"]]]],[[["usize",15]],[["global",3],["box",3,["global"]]]],[[["usize",15]],["box",3]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],null,null,[[["box",3]],[["option",4,["ordering"]],["ordering",4]]],[[["btreemap",3]],[["option",4,["ordering"]],["ordering",4]]],[[["vecdeque",3]],[["option",4,["ordering"]],["ordering",4]]],[[["vec",3]],[["option",4,["ordering"]],["ordering",4]]],[[["string",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["usize",15]],[[],[["box",3,["global"]],["pin",3,["box"]]]],[[],[["pin",3,["box"]],["box",3]]],[[["box",3],["pin",3,["box"]],["context",3]],["poll",4]],[[["pin",3,["box"]],["box",3],["context",3]],[["poll",4,["option"]],["option",4]]],[[],["option",4]],[[],[["char",15],["option",4,["char"]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],null,[[]],[[["char",15]]],[[]],[[]],[[["str",15]]],[[],["range",3]],[[],["iter",3]],[[],["rangemut",3]],[[],["itermut",3]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]]],[[["usize",15]],["char",15]],[[],["option",4]],[[]],[[["str",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["pin",3,["box"]],["box",3]],["generatorstate",4]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["splice",3]],[[]],[[],["btreemap",3]],[[["usize",15]],["vecdeque",3]],[[["usize",15]],["vec",3]],[[["usize",15]],["string",3]],[[["str",15]],[["option",4,["str"]],["str",15]]],[[["str",15]],[["option",4,["str"]],["str",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["box",3,["global"]],["global",3]],[["result",4,["box"]],["box",3,["global"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["occupiederror"]],["occupiederror",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["box",3,["global"]],["result",4,["box","allocerror"]],["allocerror",3]]],[[],[["allocerror",3],["box",3],["result",4,["box","allocerror"]]]],[[],[["allocerror",3],["result",4,["box","allocerror"]],["box",3,["maybeuninit","global"]]]],[[],[["result",4,["box","allocerror"]],["allocerror",3],["box",3,["maybeuninit"]]]],[[],[["allocerror",3],["result",4,["box","allocerror"]],["box",3,["maybeuninit","global"]]]],[[],[["result",4,["box","allocerror"]],["allocerror",3],["box",3,["maybeuninit"]]]],[[["usize",15]],[["tryreserveerror",4],["result",4,["tryreserveerror"]]]],[[["usize",15]],[["tryreserveerror",4],["result",4,["tryreserveerror"]]]],[[["usize",15]],[["tryreserveerror",4],["result",4,["tryreserveerror"]]]],[[["usize",15]],[["tryreserveerror",4],["result",4,["tryreserveerror"]]]],[[["usize",15]],[["tryreserveerror",4],["result",4,["tryreserveerror"]]]],[[["usize",15]],[["tryreserveerror",4],["result",4,["tryreserveerror"]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[],["values",3]],[[],["valuesmut",3]],null,null,[[["usize",15]],["vecdeque",3]],[[["usize",15]],[["vec",3,["global"]],["global",3]]],[[["usize",15]],["string",3]],[[["usize",15]],["vec",3]],[[]],[[]],[[["char",15]],[["result",4,["error"]],["error",3]]],[[["i128",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["i8",15]]],[[["isize",15]]],[[["str",15]],[["result",4,["error"]],["error",3]]],[[["u128",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u8",15]]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["infallible",4]],[[]],[[["infallible",4]],["ordering",4]],[[["infallible",4]],["bool",15]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[],["infallible",4]],[[]],[[]],[[]],[[]],[[["infallible",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["discriminant",3]],[[],["manuallydrop",3]],[[],["maybeuninit",19]],[[]],[[]],[[]],[[["manuallydrop",3]],["ordering",4]],[[],["manuallydrop",3]],[[]],[[]],[[],["discriminant",3]],[[]],[[["manuallydrop",3]]],[[["discriminant",3]],["bool",15]],[[["manuallydrop",3]],["bool",15]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["manuallydrop",3]]],[[],["usize",15]],[[],["usize",15]],[[["manuallydrop",3]],["bool",15]],[[],["bool",15]],[[],["manuallydrop",3]],[[],["maybeuninit",19]],[[["manuallydrop",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["manuallydrop",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["maybeuninit",19]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["maybeuninit",19]],null,null,[[]],[[]],[[]],[[]],[[],["location",3]],[[],["location",3]],[[]],[[["location",3]],["ordering",4]],[[],["u32",15]],[[["location",3]],["bool",15]],[[],["str",15]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],[["option",4,["location"]],["location",3]]],[[],[["arguments",3],["option",4,["arguments"]]]],[[["location",3]],["bool",15]],[[["location",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["any",8]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[],["usize",15]],[[]],[[]],[[],["nonnull",3]],[[]],[[]],[[],["maybeuninit",19]],[[],["maybeuninit",19]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nonnull",3]],[[],["dynmetadata",3]],[[],["nonnull",3]],[[]],[[]],[[["dynmetadata",3]],["ordering",4]],[[["nonnull",3]],["ordering",4]],[[["usize",15]]],[[["usize",15]]],[[],["nonnull",3]],[[]],[[],["bool",15]],[[["dynmetadata",3]],["bool",15]],[[["nonnull",3]],["bool",15]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[],["nonnull",3]],[[],["nonnull",3]],[[]],[[["nonnull",3]],["nonnull",3]],[[]],[[],["nonnull",3]],[[]],[[]],[[]],[[]],[[]],[[],["layout",3]],[[],["usize",15]],[[]],[[],[["option",4,["nonnull"]],["nonnull",3]]],[[],["nonnull",3]],[[]],[[]],[[["dynmetadata",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonnull",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15],["nonnull",3]],["nonnull",3]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["u8",15],["usize",15]]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"MessageId"],[3,"ProgramId"],[3,"MessageHandle"],[8,"FromStr"],[8,"ToOwned"],[3,"String"],[3,"Box"],[3,"Vec"],[3,"VecDeque"],[3,"BTreeMap"],[8,"ToString"],[8,"TryInto"],[8,"TryFrom"],[8,"AsMut"],[8,"AsRef"],[4,"Infallible"],[8,"From"],[8,"Into"],[19,"MaybeUninit"],[3,"Discriminant"],[3,"ManuallyDrop"],[3,"PanicInfo"],[3,"Location"],[8,"Pointee"],[3,"DynMetadata"],[3,"NonNull"],[3,"Drain"],[3,"IntoIter"],[3,"DrainFilter"],[3,"Splice"]],"a":{"memcpy":[834],"memmove":[833]}},\
"gstd_async":{"doc":"","t":[23,5,0,0,0,3,13,13,4,13,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["main","main_loop","msg","mutex","rwlock","MessageFuture","None","Pending","ReplyPoll","Some","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","into_future","poll","send_and_wait_for_reply","try_from","try_from","try_into","try_into","type_id","type_id","Mutex","MutexGuard","MutexLockFuture","as_byte_slice","as_mut","as_mut_byte_slice","as_mut_slice_of","as_ref","as_slice_of","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref_mut","drop","from","from","from","into","into","into","into_future","lock","new","poll","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","RwLock","RwLockReadFuture","RwLockReadGuard","RwLockWriteFuture","RwLockWriteGuard","as_byte_slice","as_byte_slice","as_mut","as_mut_byte_slice","as_mut_slice_of","as_ref","as_ref","as_slice_of","as_slice_of","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref_mut","drop","drop","from","from","from","from","from","into","into","into","into","into","into_future","into_future","new","poll","poll","read","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write"],"q":["gstd_async","","","","","gstd_async::msg","","","","","","","","","","","","","","","","","","","","","","gstd_async::mutex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gstd_async::rwlock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Mark async function to be the program entry point.","Asynchronous message handling main loop.","","","","","","","","","","","","","","","","","","","Send a message and wait for reply.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,0,1,1,2,1,2,1,2,1,2,2,2,0,1,2,1,2,1,2,0,0,0,3,3,3,3,3,3,4,3,5,4,3,5,3,3,3,4,3,5,4,3,5,5,4,4,5,4,3,5,4,3,5,4,3,5,0,0,0,0,0,6,7,7,7,7,6,7,6,7,8,6,7,9,10,8,6,7,9,10,6,7,7,6,7,8,6,7,9,10,8,6,7,9,10,9,10,8,9,10,8,8,6,7,9,10,8,6,7,9,10,8,6,7,9,10,8],"f":[null,[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["context",3],["pin",3]],["poll",4]],[[["u64",15],["programid",3],["u128",15]],["messagefuture",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[]],[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mutexlockfuture",3]],[[],["mutex",3]],[[["context",3],["pin",3]],["poll",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlock",3]],[[["context",3],["pin",3]],["poll",4]],[[["context",3],["pin",3]],["poll",4]],[[],["rwlockreadfuture",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["rwlockwritefuture",3]]],"p":[[4,"ReplyPoll"],[3,"MessageFuture"],[3,"MutexGuard"],[3,"Mutex"],[3,"MutexLockFuture"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLock"],[3,"RwLockReadFuture"],[3,"RwLockWriteFuture"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};